'\" t
.\"     Title: hg
.\"    Author: [see the "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.75.1 <http://docbook.sf.net/>
.\"      Date: 07/23/2009
.\"    Manual: Mercurial Manual
.\"    Source: Mercurial
.\"  Language: English
.\"
.TH "HG" "1" "07/23/2009" "Mercurial" "Mercurial Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
hg \- Mercurial source code management system
.SH "SYNOPSIS"
.sp
\fBhg\fR \fIcommand\fR [\fIoption\fR]\&... [\fIargument\fR]\&...
.SH "DESCRIPTION"
.sp
The \fBhg\fR command provides a command line interface to the Mercurial system\&.
.SH "COMMAND ELEMENTS"
.PP
files \&...
.RS 4
indicates one or more filename or relative path filenames; see "FILE NAME PATTERNS" for information on pattern matching
.RE
.PP
path
.RS 4
indicates a path on the local machine
.RE
.PP
revision
.RS 4
indicates a changeset which can be specified as a changeset revision number, a tag, or a unique substring of the changeset hash value
.RE
.PP
repository path
.RS 4
either the pathname of a local repository or the URI of a remote repository\&.
.RE
.SH "OPTIONS"
.PP
\-R, \-\-repository
.RS 4
repository root directory or symbolic path name
.RE
.PP
\-\-cwd
.RS 4
change working directory
.RE
.PP
\-y, \-\-noninteractive
.RS 4
do not prompt, assume
\fIyes\fR
for any required answers
.RE
.PP
\-q, \-\-quiet
.RS 4
suppress output
.RE
.PP
\-v, \-\-verbose
.RS 4
enable additional output
.RE
.PP
\-\-config
.RS 4
set/override config option
.RE
.PP
\-\-debug
.RS 4
enable debugging output
.RE
.PP
\-\-debugger
.RS 4
start debugger
.RE
.PP
\-\-encoding
.RS 4
set the charset encoding (default: UTF\-8)
.RE
.PP
\-\-encodingmode
.RS 4
set the charset encoding mode (default: strict)
.RE
.PP
\-\-traceback
.RS 4
print traceback on exception
.RE
.PP
\-\-time
.RS 4
time how long the command takes
.RE
.PP
\-\-profile
.RS 4
print command execution profile
.RE
.PP
\-\-version
.RS 4
output version information and exit
.RE
.PP
\-h, \-\-help
.RS 4
display help and exit
.RE
.SH "COMMANDS"
.PP
add [OPTION]\&... [FILE]\&...
.RS 4
Schedule files to be version controlled and added to the repository\&.
.sp
.if n \{\
.RS 4
.\}
.nf
The files will be added to the repository at the next commit\&. To
undo an add before that, see hg forget\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If no names are given, add all files to the repository\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
\-n, \-\-dry\-run  do not perform actions, just print output
.fi
.if n \{\
.RE
.\}
.RE
.PP
addremove [OPTION]\&... [FILE]\&...
.RS 4
Add all new files and remove all missing files from the repository\&.
.sp
.if n \{\
.RS 4
.\}
.nf
New files are ignored if they match any of the patterns in
\&.hgignore\&. As with add, these changes take effect at the next
commit\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Use the \-s/\-\-similarity option to detect renamed files\&. With a
parameter > 0, this compares every removed file with every added
file and records those similar enough as renames\&. This option
takes a percentage between 0 (disabled) and 100 (files must be
identical) as its parameter\&. Detecting renamed files this way can
be expensive\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-s, \-\-similarity  guess renamed files by similarity (0<=s<=100)
\-I, \-\-include     include names matching the given patterns
\-X, \-\-exclude     exclude names matching the given patterns
\-n, \-\-dry\-run     do not perform actions, just print output
.fi
.if n \{\
.RE
.\}
.RE
.PP
annotate [\-r REV] [\-f] [\-a] [\-u] [\-d] [\-n] [\-c] [\-l] FILE\&...
.RS 4
List changes in files, showing the revision id responsible for each line
.sp
.if n \{\
.RS 4
.\}
.nf
This command is useful for discovering when a change was made and
by whom\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Without the \-a/\-\-text option, annotate will avoid processing files
it detects as binary\&. With \-a, annotate will annotate the file
anyway, although the results will probably be neither useful
nor desirable\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-r, \-\-rev          annotate the specified revision
\-f, \-\-follow       follow file copies and renames
\-a, \-\-text         treat all files as text
\-u, \-\-user         list the author (long with \-v)
\-d, \-\-date         list the date (short with \-q)
\-n, \-\-number       list the revision number (default)
\-c, \-\-changeset    list the changeset
\-l, \-\-line\-number  show line number at the first appearance
\-I, \-\-include      include names matching the given patterns
\-X, \-\-exclude      exclude names matching the given patterns
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: blame
.fi
.if n \{\
.RE
.\}
.RE
.PP
archive [OPTION]\&... DEST
.RS 4
By default, the revision used is the parent of the working directory; use \-r/\-\-rev to specify a different revision\&.
.sp
.if n \{\
.RS 4
.\}
.nf
To specify the type of archive to create, use \-t/\-\-type\&. Valid
types are:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
"files" (default): a directory full of files
"tar": tar archive, uncompressed
"tbz2": tar archive, compressed using bzip2
"tgz": tar archive, compressed using gzip
"uzip": zip archive, uncompressed
"zip": zip archive, compressed using deflate
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The exact name of the destination archive or directory is given
using a format string; see \'hg help export\' for details\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Each member added to an archive file has a directory prefix
prepended\&. Use \-p/\-\-prefix to specify a format string for the
prefix\&. The default is the basename of the archive, with suffixes
removed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-\-no\-decode    do not pass files through decoders
\-p, \-\-prefix   directory prefix for files in archive
\-r, \-\-rev      revision to distribute
\-t, \-\-type     type of distribution to create
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi
.if n \{\
.RE
.\}
.RE
.PP
backout [OPTION]\&... [\-r] REV
.RS 4
Commit the backed out changes as a new changeset\&. The new changeset is a child of the backed out changeset\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If you backout a changeset other than the tip, a new head is
created\&. This head will be the new tip and you should merge this
backout changeset with another head\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The \-\-merge option remembers the parent of the working directory
before starting the backout, then merges the new head with that
changeset afterwards\&. This saves you from doing the merge by hand\&.
The result of this merge is not committed, as with a normal merge\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
See \'hg help dates\' for a list of formats valid for \-d/\-\-date\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-\-merge        merge with old dirstate parent after backout
\-\-parent       parent to choose when backing out merge
\-r, \-\-rev      revision to backout
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
\-m, \-\-message  use <text> as commit message
\-l, \-\-logfile  read commit message from <file>
\-d, \-\-date     record datecode as commit date
\-u, \-\-user     record the specified user as committer
.fi
.if n \{\
.RE
.\}
.RE
.PP
bisect [\-gbsr] [\-c CMD] [REV]
.RS 4
This command helps to find changesets which introduce problems\&. To use, mark the earliest changeset you know exhibits the problem as bad, then mark the latest changeset which is free from the problem as good\&. Bisect will update your working directory to a revision for testing (unless the \-U/\-\-noupdate option is specified)\&. Once you have performed tests, mark the working directory as good or bad, and bisect will either update to another candidate changeset or announce that it has found the bad revision\&.
.sp
.if n \{\
.RS 4
.\}
.nf
As a shortcut, you can also use the revision argument to mark a
revision as good or bad without checking it out first\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If you supply a command, it will be used for automatic bisection\&.
Its exit status will be used to mark revisions as good or bad:
status 0 means good, 125 means to skip the revision, 127
(command not found) will abort the bisection, and any other
non\-zero exit status means the revision is bad\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-r, \-\-reset     reset bisect state
\-g, \-\-good      mark changeset good
\-b, \-\-bad       mark changeset bad
\-s, \-\-skip      skip testing changeset
\-c, \-\-command   use command to check changeset state
\-U, \-\-noupdate  do not update to target
.fi
.if n \{\
.RE
.\}
.RE
.PP
branch [\-fC] [NAME]
.RS 4
With no argument, show the current branch name\&. With one argument, set the working directory branch name (the branch will not exist in the repository until the next commit)\&. Standard practice recommends that primary development take place on the
\fIdefault\fR
branch\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Unless \-f/\-\-force is specified, branch will not let you set a
branch name that already exists, even if it\'s inactive\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Use \-C/\-\-clean to reset the working directory branch to that of
the parent of the working directory, negating a previous branch
change\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Use the command \'hg update\' to switch to an existing branch\&. Use
\'hg commit \-\-close\-branch\' to mark this branch as closed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-f, \-\-force  set branch name even if it shadows an existing branch
\-C, \-\-clean  reset branch name to parent branch name
.fi
.if n \{\
.RE
.\}
.RE
.PP
branches [\-a]
.RS 4
List the repository\(cqs named branches, indicating which ones are inactive\&. If \-c/\-\-closed is specified, also list branches which have been marked closed (see hg commit \-\-close\-branch)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If \-a/\-\-active is specified, only show active branches\&. A branch
is considered active if it contains repository heads\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Use the command \'hg update\' to switch to an existing branch\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-a, \-\-active  show only branches that have unmerged heads
\-c, \-\-closed  show normal and closed branches
.fi
.if n \{\
.RE
.\}
.RE
.PP
bundle [\-f] [\-a] [\-r REV]\&... [\-\-base REV]\&... FILE [DEST]
.RS 4
Generate a compressed changegroup file collecting changesets not known to be in another repository\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If no destination repository is specified the destination is
assumed to have all the nodes specified by one or more \-\-base
parameters\&. To create a bundle containing all changesets, use
\-a/\-\-all (or \-\-base null)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
You can change compression method with the \-t/\-\-type option\&.
The available compression methods are: none, bzip2, and
gzip (by default, bundles are compressed using bzip2)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The bundle file can then be transferred using conventional means
and applied to another repository with the unbundle or pull
command\&. This is useful when direct push and pull are not
available or when exporting an entire repository is undesirable\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Applying bundles preserves all changeset contents including
permissions, copy/rename information, and revision history\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-f, \-\-force  run even when remote repository is unrelated
\-r, \-\-rev    a changeset up to which you would like to bundle
\-\-base       a base changeset to specify instead of a destination
\-a, \-\-all    bundle all changesets in the repository
\-t, \-\-type   bundle compression type to use (default: bzip2)
\-e, \-\-ssh    specify ssh command to use
\-\-remotecmd  specify hg command to run on the remote side
.fi
.if n \{\
.RE
.\}
.RE
.PP
cat [OPTION]\&... FILE\&...
.RS 4
Print the specified files as they were at the given revision\&. If no revision is given, the parent of the working directory is used, or tip if no revision is checked out\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Output may be to a file, in which case the name of the file is
given using a format string\&. The formatting rules are the same as
for the export command, with the following additions:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
%s   basename of file being printed
%d   dirname of file being printed, or \'\&.\' if in repository root
%p   root\-relative path name of file being printed
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-o, \-\-output   print output to file with formatted name
\-r, \-\-rev      print the given revision
\-\-decode       apply any matching decode filter
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi
.if n \{\
.RE
.\}
.RE
.PP
clone [OPTION]\&... SOURCE [DEST]
.RS 4
Create a copy of an existing repository in a new directory\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If no destination directory name is specified, it defaults to the
basename of the source\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The location of the source is added to the new repository\'s
\&.hg/hgrc file, as the default to be used for future pulls\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If you use the \-r/\-\-rev option to clone up to a specific revision,
no subsequent revisions (including subsequent tags) will be
present in the cloned repository\&. This option implies \-\-pull, even
on local repositories\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
By default, clone will check out the head of the \'default\' branch\&.
If the \-U/\-\-noupdate option is used, the new clone will contain
only a repository (\&.hg) and no working copy (the working copy
parent is the null revision)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
See \'hg help urls\' for valid source format details\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
It is possible to specify an ssh:// URL as the destination, but no
\&.hg/hgrc and working directory will be created on the remote side\&.
Please see \'hg help urls\' for important details about ssh:// URLs\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
For efficiency, hardlinks are used for cloning whenever the source
and destination are on the same filesystem (note this applies only
to the repository data, not to the checked out files)\&. Some
filesystems, such as AFS, implement hardlinking incorrectly, but
do not report errors\&. In these cases, use the \-\-pull option to
avoid hardlinking\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
In some cases, you can clone repositories and checked out files
using full hardlinks with
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$ cp \-al REPO REPOCLONE
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This is the fastest way to clone, but it is not always safe\&. The
operation is not atomic (making sure REPO is not modified during
the operation is up to you) and you have to make sure your editor
breaks hardlinks (Emacs and most Linux Kernel tools do so)\&. Also,
this is not compatible with certain extensions that place their
metadata under the \&.hg directory, such as mq\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-U, \-\-noupdate  the clone will only contain a repository (no
                working copy)
\-r, \-\-rev       a changeset you would like to have after cloning
\-\-pull          use pull protocol to copy metadata
\-\-uncompressed  use uncompressed transfer (fast over LAN)
\-e, \-\-ssh       specify ssh command to use
\-\-remotecmd     specify hg command to run on the remote side
.fi
.if n \{\
.RE
.\}
.RE
.PP
commit [OPTION]\&... [FILE]\&...
.RS 4
Commit changes to the given files into the repository\&. Unlike a centralized RCS, this operation is a local operation\&. See hg push for a way to actively distribute your changes\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If a list of files is omitted, all changes reported by "hg status"
will be committed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If you are committing the result of a merge, do not provide any
filenames or \-I/\-X filters\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If no commit message is specified, the configured editor is
started to prompt you for a message\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
See \'hg help dates\' for a list of formats valid for \-d/\-\-date\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-A, \-\-addremove  mark new/missing files as added/removed before
                 committing
\-\-close\-branch   mark a branch as closed, hiding it from the
                 branch list
\-I, \-\-include    include names matching the given patterns
\-X, \-\-exclude    exclude names matching the given patterns
\-m, \-\-message    use <text> as commit message
\-l, \-\-logfile    read commit message from <file>
\-d, \-\-date       record datecode as commit date
\-u, \-\-user       record the specified user as committer
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: ci
.fi
.if n \{\
.RE
.\}
.RE
.PP
copy [OPTION]\&... [SOURCE]\&... DEST
.RS 4
Mark dest as having copies of source files\&. If dest is a directory, copies are put in that directory\&. If dest is a file, the source must be a single file\&.
.sp
.if n \{\
.RS 4
.\}
.nf
By default, this command copies the contents of files as they
exist in the working directory\&. If invoked with \-A/\-\-after, the
operation is recorded, but no copying is performed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This command takes effect with the next commit\&. To undo a copy
before that, see hg revert\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-A, \-\-after    record a copy that has already occurred
\-f, \-\-force    forcibly copy over an existing managed file
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
\-n, \-\-dry\-run  do not perform actions, just print output
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: cp
.fi
.if n \{\
.RE
.\}
.RE
.PP
diff [OPTION]\&... [\-r REV1 [\-r REV2]] [FILE]\&...
.RS 4
Show differences between revisions for the specified files\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Differences between files are shown using the unified diff format\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
NOTE: diff may generate unexpected results for merges, as it will
default to comparing against the working directory\'s first parent
changeset if no revisions are specified\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
When two revision arguments are given, then changes are shown
between those revisions\&. If only one revision is specified then
that revision is compared to the working directory, and, when no
revisions are specified, the working directory files are compared
to its parent\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Without the \-a/\-\-text option, diff will avoid generating diffs of
files it detects as binary\&. With \-a, diff will generate a diff
anyway, probably with undesirable results\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Use the \-g/\-\-git option to generate diffs in the git extended diff
format\&. For more information, read \'hg help diffs\'\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-r, \-\-rev                  revision
\-c, \-\-change               change made by revision
\-a, \-\-text                 treat all files as text
\-g, \-\-git                  use git extended diff format
\-\-nodates                  don\'t include dates in diff headers
\-p, \-\-show\-function        show which function each change is in
\-w, \-\-ignore\-all\-space     ignore white space when comparing lines
\-b, \-\-ignore\-space\-change  ignore changes in the amount of white
                           space
\-B, \-\-ignore\-blank\-lines   ignore changes whose lines are all
                           blank
\-U, \-\-unified              number of lines of context to show
\-I, \-\-include              include names matching the given
                           patterns
\-X, \-\-exclude              exclude names matching the given
                           patterns
.fi
.if n \{\
.RE
.\}
.RE
.PP
export [OPTION]\&... [\-o OUTFILESPEC] REV\&...
.RS 4
Print the changeset header and diffs for one or more revisions\&.
.sp
.if n \{\
.RS 4
.\}
.nf
The information shown in the changeset header is: author,
changeset hash, parent(s) and commit comment\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
NOTE: export may generate unexpected diff output for merge
changesets, as it will compare the merge changeset against its
first parent only\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Output may be to a file, in which case the name of the file is
given using a format string\&. The formatting rules are as follows:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
%%   literal "%" character
%H   changeset hash (40 bytes of hexadecimal)
%N   number of patches being generated
%R   changeset revision number
%b   basename of the exporting repository
%h   short\-form changeset hash (12 bytes of hexadecimal)
%n   zero\-padded sequence number, starting at 1
%r   zero\-padded changeset revision number
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Without the \-a/\-\-text option, export will avoid generating diffs
of files it detects as binary\&. With \-a, export will generate a
diff anyway, probably with undesirable results\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Use the \-g/\-\-git option to generate diffs in the git extended diff
format\&. See \'hg help diffs\' for more information\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
With the \-\-switch\-parent option, the diff will be against the
second parent\&. It can be useful to review a merge\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-o, \-\-output     print output to file with formatted name
\-\-switch\-parent  diff against the second parent
\-a, \-\-text       treat all files as text
\-g, \-\-git        use git extended diff format
\-\-nodates        don\'t include dates in diff headers
.fi
.if n \{\
.RE
.\}
.RE
.PP
forget [OPTION]\&... FILE\&...
.RS 4
Mark the specified files so they will no longer be tracked after the next commit\&.
.sp
.if n \{\
.RS 4
.\}
.nf
This only removes files from the current branch, not from the
entire project history, and it does not delete them from the
working directory\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To undo a forget before the next commit, see hg add\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi
.if n \{\
.RE
.\}
.RE
.PP
grep [OPTION]\&... PATTERN [FILE]\&...
.RS 4
Search revisions of files for a regular expression\&.
.sp
.if n \{\
.RS 4
.\}
.nf
This command behaves differently than Unix grep\&. It only accepts
Python/Perl regexps\&. It searches repository history, not the
working directory\&. It always prints the revision number in which a
match appears\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
By default, grep only prints output for the first revision of a
file in which it finds a match\&. To get it to print every revision
that contains a change in match status ("\-" for a match that
becomes a non\-match, or "+" for a non\-match that becomes a match),
use the \-\-all flag\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-0, \-\-print0              end fields with NUL
\-\-all                     print all revisions that match
\-f, \-\-follow              follow changeset history, or file
                          history across copies and renames
\-i, \-\-ignore\-case         ignore case when matching
\-l, \-\-files\-with\-matches  print only filenames and revisions that
                          match
\-n, \-\-line\-number         print matching line numbers
\-r, \-\-rev                 search in given revision range
\-u, \-\-user                list the author (long with \-v)
\-d, \-\-date                list the date (short with \-q)
\-I, \-\-include             include names matching the given
                          patterns
\-X, \-\-exclude             exclude names matching the given
                          patterns
.fi
.if n \{\
.RE
.\}
.RE
.PP
heads [\-r STARTREV] [REV]\&...
.RS 4
With no arguments, show all repository head changesets\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Repository "heads" are changesets that don\'t have child
changesets\&. They are where development generally takes place and
are the usual targets for update and merge operations\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If one or more REV is given, the "branch heads" will be shown for
the named branch associated with that revision\&. The name of the
branch is called the revision\'s branch tag\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Branch heads are revisions on a given named branch that do not have
any descendants on the same branch\&. A branch head could be a true head
or it could be the last changeset on a branch before a new branch
was created\&. If none of the branch heads are true heads, the branch
is considered inactive\&. If \-c/\-\-closed is specified, also show branch
heads marked closed (see hg commit \-\-close\-branch)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If STARTREV is specified only those heads (or branch heads) that
are descendants of STARTREV will be displayed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-r, \-\-rev     show only heads which are descendants of REV
\-a, \-\-active  show only the active branch heads from open branches
\-c, \-\-closed  show normal and closed branch heads
\-\-style       display using template map file
\-\-template    display with template
.fi
.if n \{\
.RE
.\}
.RE
.PP
help [TOPIC]
.RS 4
With no arguments, print a list of commands with short help messages\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Given a topic, extension, or command name, print help for that
topic\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
identify [\-nibt] [\-r REV] [SOURCE]
.RS 4
With no revision, print a summary of the current state of the repository\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Specifying a path to a repository root or Mercurial bundle will
cause lookup to operate on that repository/bundle\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This summary identifies the repository state using one or two
parent hash identifiers, followed by a "+" if there are
uncommitted changes in the working directory, a list of tags for
this revision and a branch name for non\-default branches\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-r, \-\-rev     identify the specified revision
\-n, \-\-num     show local revision number
\-i, \-\-id      show global revision id
\-b, \-\-branch  show branch
\-t, \-\-tags    show tags
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: id
.fi
.if n \{\
.RE
.\}
.RE
.PP
import [OPTION]\&... PATCH\&...
.RS 4
Import a list of patches and commit them individually\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If there are outstanding changes in the working directory, import
will abort unless given the \-f/\-\-force flag\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
You can import a patch straight from a mail message\&. Even patches
as attachments work (to use the body part, it must have type
text/plain or text/x\-patch)\&. From and Subject headers of email
message are used as default committer and commit message\&. All
text/plain body parts before first diff are added to commit
message\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If the imported patch was generated by hg export, user and
description from patch override values from message headers and
body\&. Values given on command line with \-m/\-\-message and \-u/\-\-user
override these\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If \-\-exact is specified, import will set the working directory to
the parent of each patch before applying it, and will abort if the
resulting changeset has a different ID than the one recorded in
the patch\&. This may happen due to character set problems or other
deficiencies in the text patch format\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
With \-s/\-\-similarity, hg will attempt to discover renames and
copies in the patch in the same way as \'addremove\'\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To read a patch from standard input, use "\-" as the patch name\&. If
a URL is specified, the patch will be downloaded from it\&.
See \'hg help dates\' for a list of formats valid for \-d/\-\-date\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-p, \-\-strip       directory strip option for patch\&. This has the
                  same meaning as the corresponding patch option
                  (default: 1)
\-b, \-\-base        base path
\-f, \-\-force       skip check for outstanding uncommitted changes
\-\-no\-commit       don\'t commit, just update the working directory
\-\-exact           apply patch to the nodes from which it was
                  generated
\-\-import\-branch   use any branch information in patch (implied by
                  \-\-exact)
\-m, \-\-message     use <text> as commit message
\-l, \-\-logfile     read commit message from <file>
\-d, \-\-date        record datecode as commit date
\-u, \-\-user        record the specified user as committer
\-s, \-\-similarity  guess renamed files by similarity (0<=s<=100)
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: patch
.fi
.if n \{\
.RE
.\}
.RE
.PP
incoming [\-p] [\-n] [\-M] [\-f] [\-r REV]\&... [\-\-bundle FILENAME] [SOURCE]
.RS 4
Show new changesets found in the specified path/URL or the default pull location\&. These are the changesets that would have been pulled if a pull at the time you issued this command\&.
.sp
.if n \{\
.RS 4
.\}
.nf
For remote repository, using \-\-bundle avoids downloading the
changesets twice if the incoming is followed by a pull\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
See pull for valid source format details\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-f, \-\-force         run even when remote repository is unrelated
\-n, \-\-newest\-first  show newest record first
\-\-bundle            file to store the bundles into
\-r, \-\-rev           a specific revision up to which you would like
                    to pull
\-p, \-\-patch         show patch
\-g, \-\-git           use git extended diff format
\-l, \-\-limit         limit number of changes displayed
\-M, \-\-no\-merges     do not show merges
\-\-style             display using template map file
\-\-template          display with template
\-e, \-\-ssh           specify ssh command to use
\-\-remotecmd         specify hg command to run on the remote side
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: in
.fi
.if n \{\
.RE
.\}
.RE
.PP
init [\-e CMD] [\-\-remotecmd CMD] [DEST]
.RS 4
Initialize a new repository in the given directory\&. If the given directory does not exist, it will be created\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If no directory is given, the current directory is used\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
It is possible to specify an ssh:// URL as the destination\&.
See \'hg help urls\' for more information\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-e, \-\-ssh    specify ssh command to use
\-\-remotecmd  specify hg command to run on the remote side
.fi
.if n \{\
.RE
.\}
.RE
.PP
locate [OPTION]\&... [PATTERN]\&...
.RS 4
Print files under Mercurial control in the working directory whose names match the given patterns\&.
.sp
.if n \{\
.RS 4
.\}
.nf
By default, this command searches all directories in the working
directory\&. To search just the current directory and its
subdirectories, use "\-\-include \&."\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If no patterns are given to match, this command prints the names
of all files under Mercurial control in the working directory\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If you want to feed the output of this command into the "xargs"
command, use the \-0 option to both this command and "xargs"\&. This
will avoid the problem of "xargs" treating single filenames that
contain whitespace as multiple filenames\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-r, \-\-rev       search the repository as it stood at REV
\-0, \-\-print0    end filenames with NUL, for use with xargs
\-f, \-\-fullpath  print complete paths from the filesystem root
\-I, \-\-include   include names matching the given patterns
\-X, \-\-exclude   exclude names matching the given patterns
.fi
.if n \{\
.RE
.\}
.RE
.PP
log [OPTION]\&... [FILE]
.RS 4
Print the revision history of the specified files or the entire project\&.
.sp
.if n \{\
.RS 4
.\}
.nf
File history is shown without following rename or copy history of
files\&. Use \-f/\-\-follow with a filename to follow history across
renames and copies\&. \-\-follow without a filename will only show
ancestors or descendants of the starting revision\&. \-\-follow\-first
only follows the first parent of merge revisions\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If no revision range is specified, the default is tip:0 unless
\-\-follow is set, in which case the working directory parent is
used as the starting revision\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
See \'hg help dates\' for a list of formats valid for \-d/\-\-date\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
By default this command prints revision number and changeset id,
tags, non\-trivial parents, user, date and time, and a summary for
each commit\&. When the \-v/\-\-verbose switch is used, the list of
changed files and full commit message are shown\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
NOTE: log \-p/\-\-patch may generate unexpected diff output for merge
changesets, as it will only compare the merge changeset against
its first parent\&. Also, only files different from BOTH parents
will appear in files:\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-f, \-\-follow       follow changeset history, or file history
                   across copies and renames
\-\-follow\-first     only follow the first parent of merge
                   changesets
\-d, \-\-date         show revisions matching date spec
\-C, \-\-copies       show copied files
\-k, \-\-keyword      do case\-insensitive search for a keyword
\-r, \-\-rev          show the specified revision or range
\-\-removed          include revisions where files were removed
\-m, \-\-only\-merges  show only merges
\-u, \-\-user         revisions committed by user
\-b, \-\-only\-branch  show only changesets within the given named
                   branch
\-P, \-\-prune        do not display revision or any of its ancestors
\-p, \-\-patch        show patch
\-g, \-\-git          use git extended diff format
\-l, \-\-limit        limit number of changes displayed
\-M, \-\-no\-merges    do not show merges
\-\-style            display using template map file
\-\-template         display with template
\-I, \-\-include      include names matching the given patterns
\-X, \-\-exclude      exclude names matching the given patterns
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: history
.fi
.if n \{\
.RE
.\}
.RE
.PP
manifest [\-r REV]
.RS 4
Print a list of version controlled files for the given revision\&. If no revision is given, the first parent of the working directory is used, or the null revision if no revision is checked out\&.
.sp
.if n \{\
.RS 4
.\}
.nf
With \-v, print file permissions, symlink and executable bits\&.
With \-\-debug, print file revision hashes\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-r, \-\-rev  revision to display
.fi
.if n \{\
.RE
.\}
.RE
.PP
merge [\-f] [[\-r] REV]
.RS 4
The current working directory is updated with all changes made in the requested revision since the last common predecessor revision\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Files that changed between either parent are marked as changed for
the next commit and a commit must be performed before any further
updates to the repository are allowed\&. The next commit will have
two parents\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If no revision is specified, the working directory\'s parent is a
head revision, and the current branch contains exactly one other
head, the other head is merged with by default\&. Otherwise, an
explicit revision with which to merge with must be provided\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-f, \-\-force    force a merge with outstanding changes
\-r, \-\-rev      revision to merge
\-P, \-\-preview  review revisions to merge (no merge is performed)
.fi
.if n \{\
.RE
.\}
.RE
.PP
outgoing [\-M] [\-p] [\-n] [\-f] [\-r REV]\&... [DEST]
.RS 4
Show changesets not found in the specified destination repository or the default push location\&. These are the changesets that would be pushed if a push was requested\&.
.sp
.if n \{\
.RS 4
.\}
.nf
See pull for valid destination format details\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-f, \-\-force         run even when remote repository is unrelated
\-r, \-\-rev           a specific revision up to which you would like
                    to push
\-n, \-\-newest\-first  show newest record first
\-p, \-\-patch         show patch
\-g, \-\-git           use git extended diff format
\-l, \-\-limit         limit number of changes displayed
\-M, \-\-no\-merges     do not show merges
\-\-style             display using template map file
\-\-template          display with template
\-e, \-\-ssh           specify ssh command to use
\-\-remotecmd         specify hg command to run on the remote side
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: out
.fi
.if n \{\
.RE
.\}
.RE
.PP
parents [\-r REV] [FILE]
.RS 4
Print the working directory\(cqs parent revisions\&. If a revision is given via \-r/\-\-rev, the parent of that revision will be printed\&. If a file argument is given, the revision in which the file was last changed (before the working directory revision or the argument to \-\-rev if given) is printed\&.
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-r, \-\-rev   show parents from the specified revision
\-\-style     display using template map file
\-\-template  display with template
.fi
.if n \{\
.RE
.\}
.RE
.PP
paths [NAME]
.RS 4
Show definition of symbolic path name NAME\&. If no name is given, show definition of all available names\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Path names are defined in the [paths] section of /etc/mercurial/hgrc
and $HOME/\&.hgrc\&. If run inside a repository, \&.hg/hgrc is used, too\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
See \'hg help urls\' for more information\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
pull [\-u] [\-f] [\-r REV]\&... [\-e CMD] [\-\-remotecmd CMD] [SOURCE]
.RS 4
Pull changes from a remote repository to a local one\&.
.sp
.if n \{\
.RS 4
.\}
.nf
This finds all changes from the repository at the specified path
or URL and adds them to a local repository (the current one unless
\-R is specified)\&. By default, this does not update the copy of the
project in the working directory\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Use hg incoming if you want to see what would have been added by a
pull at the time you issued this command\&. If you then decide to
added those changes to the repository, you should use pull \-r X
where X is the last changeset listed by hg incoming\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If SOURCE is omitted, the \'default\' path will be used\&.
See \'hg help urls\' for more information\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-u, \-\-update  update to new tip if changesets were pulled
\-f, \-\-force   run even when remote repository is unrelated
\-r, \-\-rev     a specific revision up to which you would like to
              pull
\-e, \-\-ssh     specify ssh command to use
\-\-remotecmd   specify hg command to run on the remote side
.fi
.if n \{\
.RE
.\}
.RE
.PP
push [\-f] [\-r REV]\&... [\-e CMD] [\-\-remotecmd CMD] [DEST]
.RS 4
Push changes from the local repository to the given destination\&.
.sp
.if n \{\
.RS 4
.\}
.nf
This is the symmetrical operation for pull\&. It moves changes from
the current repository to a different one\&. If the destination is
local this is identical to a pull in that directory from the
current one\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
By default, push will refuse to run if it detects the result would
increase the number of remote heads\&. This generally indicates the
user forgot to pull and merge before pushing\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If \-r/\-\-rev is used, the named revision and all its ancestors will
be pushed to the remote repository\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Please see \'hg help urls\' for important details about ssh://
URLs\&. If DESTINATION is omitted, a default path will be used\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-f, \-\-force  force push
\-r, \-\-rev    a specific revision up to which you would like to
             push
\-e, \-\-ssh    specify ssh command to use
\-\-remotecmd  specify hg command to run on the remote side
.fi
.if n \{\
.RE
.\}
.RE
.PP
recover
.RS 4
Recover from an interrupted commit or pull\&.
.sp
.if n \{\
.RS 4
.\}
.nf
This command tries to fix the repository status after an
interrupted operation\&. It should only be necessary when Mercurial
suggests it\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
remove [OPTION]\&... FILE\&...
.RS 4
Schedule the indicated files for removal from the repository\&.
.sp
.if n \{\
.RS 4
.\}
.nf
This only removes files from the current branch, not from the
entire project history\&. \-A/\-\-after can be used to remove only
files that have already been deleted, \-f/\-\-force can be used to
force deletion, and \-Af can be used to remove files from the next
revision without deleting them from the working directory\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The following table details the behavior of remove for different
file states (columns) and option combinations (rows)\&. The file
states are Added [A], Clean [C], Modified [M] and Missing [!]
(as reported by hg status)\&. The actions are Warn, Remove (from
branch) and Delete (from disk)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
       A  C  M  !
none   W  RD W  R
\-f     R  RD RD R
\-A     W  W  W  R
\-Af    R  R  R  R
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This command schedules the files to be removed at the next commit\&.
To undo a remove before that, see hg revert\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-A, \-\-after    record delete for missing files
\-f, \-\-force    remove (and delete) file even if added or modified
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: rm
.fi
.if n \{\
.RE
.\}
.RE
.PP
rename [OPTION]\&... SOURCE\&... DEST
.RS 4
Mark dest as copies of sources; mark sources for deletion\&. If dest is a directory, copies are put in that directory\&. If dest is a file, there can only be one source\&.
.sp
.if n \{\
.RS 4
.\}
.nf
By default, this command copies the contents of files as they
exist in the working directory\&. If invoked with \-A/\-\-after, the
operation is recorded, but no copying is performed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This command takes effect at the next commit\&. To undo a rename
before that, see hg revert\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-A, \-\-after    record a rename that has already occurred
\-f, \-\-force    forcibly copy over an existing managed file
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
\-n, \-\-dry\-run  do not perform actions, just print output
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: mv
.fi
.if n \{\
.RE
.\}
.RE
.PP
resolve [OPTION]\&... [FILE]\&...
.RS 4
This command will cleanly retry unresolved file merges using file revisions preserved from the last update or merge\&. To attempt to resolve all unresolved files, use the \-a/\-\-all switch\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If a conflict is resolved manually, please note that the changes
will be overwritten if the merge is retried with resolve\&. The
\-m/\-\-mark switch should be used to mark the file as resolved\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This command also allows listing resolved files and manually
indicating whether or not files are resolved\&. All files must be
marked as resolved before a commit is permitted\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The codes used to show the status of files are:
U = unresolved
R = resolved
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-a, \-\-all      remerge all unresolved files
\-l, \-\-list     list state of files needing merge
\-m, \-\-mark     mark files as resolved
\-u, \-\-unmark   unmark files as resolved
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi
.if n \{\
.RE
.\}
.RE
.PP
revert [OPTION]\&... [\-r REV] [NAME]\&...
.RS 4
(Use update \-r to check out earlier revisions, revert does not change the working directory parents\&.)
.sp
.if n \{\
.RS 4
.\}
.nf
With no revision specified, revert the named files or directories
to the contents they had in the parent of the working directory\&.
This restores the contents of the affected files to an unmodified
state and unschedules adds, removes, copies, and renames\&. If the
working directory has two parents, you must explicitly specify the
revision to revert to\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Using the \-r/\-\-rev option, revert the given files or directories
to their contents as of a specific revision\&. This can be helpful
to "roll back" some or all of an earlier change\&. See \'hg help
dates\' for a list of formats valid for \-d/\-\-date\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Revert modifies the working directory\&. It does not commit any
changes, or change the parent of the working directory\&. If you
revert to a revision other than the parent of the working
directory, the reverted files will thus appear modified
afterwards\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If a file has been deleted, it is restored\&. If the executable mode
of a file was changed, it is reset\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If names are given, all files matching the names are reverted\&.
If no arguments are given, no files are reverted\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Modified files are saved with a \&.orig suffix before reverting\&.
To disable these backups, use \-\-no\-backup\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-a, \-\-all      revert all changes when no arguments given
\-d, \-\-date     tipmost revision matching date
\-r, \-\-rev      revision to revert to
\-\-no\-backup    do not save backup copies of files
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
\-n, \-\-dry\-run  do not perform actions, just print output
.fi
.if n \{\
.RE
.\}
.RE
.PP
rollback
.RS 4
This command should be used with care\&. There is only one level of rollback, and there is no way to undo a rollback\&. It will also restore the dirstate at the time of the last transaction, losing any dirstate changes since that time\&. This command does not alter the working directory\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Transactions are used to encapsulate the effects of all commands
that create new changesets or propagate existing changesets into a
repository\&. For example, the following commands are transactional,
and their effects can be rolled back:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
commit
import
pull
push (with this repository as destination)
unbundle
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This command is not intended for use on public repositories\&. Once
changes are visible for pull by other users, rolling a transaction
back locally is ineffective (someone else may already have pulled
the changes)\&. Furthermore, a race is possible with readers of the
repository; for example an in\-progress pull from the repository
may fail if a rollback is performed\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
root
.RS 4
Print the root directory of the current repository\&.
.RE
.PP
serve [OPTION]\&...
.RS 4
Start a local HTTP repository browser and pull server\&.
.sp
.if n \{\
.RS 4
.\}
.nf
By default, the server logs accesses to stdout and errors to
stderr\&. Use the \-A/\-\-accesslog and \-E/\-\-errorlog options to log to
files\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-A, \-\-accesslog   name of access log file to write to
\-d, \-\-daemon      run server in background
\-\-daemon\-pipefds  used internally by daemon mode
\-E, \-\-errorlog    name of error log file to write to
\-p, \-\-port        port to listen on (default: 8000)
\-a, \-\-address     address to listen on (default: all interfaces)
\-\-prefix          prefix path to serve from (default: server root)
\-n, \-\-name        name to show in web pages (default: working
                  directory)
\-\-webdir\-conf     name of the webdir config file (serve more than
                  one repository)
\-\-pid\-file        name of file to write process ID to
\-\-stdio           for remote clients
\-t, \-\-templates   web templates to use
\-\-style           template style to use
\-6, \-\-ipv6        use IPv6 in addition to IPv4
\-\-certificate     SSL certificate file
.fi
.if n \{\
.RE
.\}
.RE
.PP
showconfig [\-u] [NAME]\&...
.RS 4
With no arguments, print names and values of all config items\&.
.sp
.if n \{\
.RS 4
.\}
.nf
With one argument of the form section\&.name, print just the value
of that config item\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
With multiple arguments, print names and values of all config
items with matching section names\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
With \-\-debug, the source (filename and line number) is printed
for each config item\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-u, \-\-untrusted  show untrusted configuration options
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: debugconfig
.fi
.if n \{\
.RE
.\}
.RE
.PP
status [OPTION]\&... [FILE]\&...
.RS 4
Show status of files in the repository\&. If names are given, only files that match are shown\&. Files that are clean or ignored or the source of a copy/move operation, are not listed unless \-c/\-\-clean, \-i/\-\-ignored, \-C/\-\-copies or \-A/\-\-all are given\&. Unless options described with "show only \&..." are given, the options \-mardu are used\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Option \-q/\-\-quiet hides untracked (unknown and ignored) files
unless explicitly requested with \-u/\-\-unknown or \-i/\-\-ignored\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
NOTE: status may appear to disagree with diff if permissions have
changed or a merge has occurred\&. The standard diff format does not
report permission changes and diff only reports changes relative
to one merge parent\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If one revision is given, it is used as the base revision\&.
If two revisions are given, the differences between them are
shown\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The codes used to show the status of files are:
M = modified
A = added
R = removed
C = clean
! = missing (deleted by non\-hg command, but still tracked)
? = not tracked
I = ignored
  = origin of the previous file listed as A (added)
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-A, \-\-all        show status of all files
\-m, \-\-modified   show only modified files
\-a, \-\-added      show only added files
\-r, \-\-removed    show only removed files
\-d, \-\-deleted    show only deleted (but tracked) files
\-c, \-\-clean      show only files without changes
\-u, \-\-unknown    show only unknown (not tracked) files
\-i, \-\-ignored    show only ignored files
\-n, \-\-no\-status  hide status prefix
\-C, \-\-copies     show source of copied files
\-0, \-\-print0     end filenames with NUL, for use with xargs
\-\-rev            show difference from revision
\-I, \-\-include    include names matching the given patterns
\-X, \-\-exclude    exclude names matching the given patterns
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: st
.fi
.if n \{\
.RE
.\}
.RE
.PP
tag [\-l] [\-m TEXT] [\-d DATE] [\-u USER] [\-r REV] NAME\&...
.RS 4
Name a particular revision using <name>\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Tags are used to name particular revisions of the repository and are
very useful to compare different revisions, to go back to significant
earlier versions or to mark branch points as releases, etc\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If no revision is given, the parent of the working directory is
used, or tip if no revision is checked out\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To facilitate version control, distribution, and merging of tags,
they are stored as a file named "\&.hgtags" which is managed
similarly to other project files and can be hand\-edited if
necessary\&. The file \'\&.hg/localtags\' is used for local tags (not
shared among repositories)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
See \'hg help dates\' for a list of formats valid for \-d/\-\-date\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-f, \-\-force    replace existing tag
\-l, \-\-local    make the tag local
\-r, \-\-rev      revision to tag
\-\-remove       remove a tag
\-m, \-\-message  use <text> as commit message
\-d, \-\-date     record datecode as commit date
\-u, \-\-user     record the specified user as committer
.fi
.if n \{\
.RE
.\}
.RE
.PP
tags
.RS 4
This lists both regular and local tags\&. When the \-v/\-\-verbose switch is used, a third column "local" is printed for local tags\&.
.RE
.PP
tip [\-p]
.RS 4
The tip revision (usually just called the tip) is the changeset most recently added to the repository (and therefore the most recently changed head)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
If you have just made a commit, that commit will be the tip\&. If
you have just pulled changes from another repository, the tip of
that repository becomes the current tip\&. The "tip" tag is special
and cannot be renamed or assigned to a different changeset\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-p, \-\-patch  show patch
\-g, \-\-git    use git extended diff format
\-\-style      display using template map file
\-\-template   display with template
.fi
.if n \{\
.RE
.\}
.RE
.PP
unbundle [\-u] FILE\&...
.RS 4
Apply one or more compressed changegroup files generated by the bundle command\&.
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-u, \-\-update  update to new tip if changesets were unbundled
.fi
.if n \{\
.RE
.\}
.RE
.PP
update [\-C] [\-d DATE] [[\-r] REV]
.RS 4
Update the repository\(cqs working directory to the specified revision, or the tip of the current branch if none is specified\&. Use null as the revision to remove the working copy (like
\fIhg clone \-U\fR)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
When the working directory contains no uncommitted changes, it
will be replaced by the state of the requested revision from the
repository\&. When the requested revision is on a different branch,
the working directory will additionally be switched to that
branch\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
When there are uncommitted changes, use option \-C/\-\-clean to
discard them, forcibly replacing the state of the working
directory with the requested revision\&. Alternately, use \-c/\-\-check
to abort\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
When there are uncommitted changes and option \-C/\-\-clean is not
used, and the parent revision and requested revision are on the
same branch, and one of them is an ancestor of the other, then the
new working directory will contain the requested revision merged
with the uncommitted changes\&. Otherwise, the update will fail with
a suggestion to use \'merge\' or \'update \-C\' instead\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If you want to update just one file to an older revision, use
revert\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
See \'hg help dates\' for a list of formats valid for \-d/\-\-date\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
options:
\-C, \-\-clean  overwrite locally modified files (no backup)
\-c, \-\-check  check for uncommitted changes
\-d, \-\-date   tipmost revision matching date
\-r, \-\-rev    revision
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
aliases: up checkout co
.fi
.if n \{\
.RE
.\}
.RE
.PP
verify
.RS 4
Verify the integrity of the current repository\&.
.sp
.if n \{\
.RS 4
.\}
.nf
This will perform an extensive check of the repository\'s
integrity, validating the hashes and checksums of each entry in
the changelog, manifest, and tracked files, as well as the
integrity of their crosslinks and indices\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
version
.RS 4
output version and copyright information
.RE
.SH "DATE FORMATS"
.sp
.if n \{\
.RS 4
.\}
.nf
Some commands allow the user to specify a date, e\&.g\&.:
* backout, commit, import, tag: Specify the commit date\&.
* log, revert, update: Select revision(s) by date\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Many date formats are valid\&. Here are some examples:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
"Wed Dec 6 13:18:29 2006" (local timezone assumed)
"Dec 6 13:18 \-0600" (year assumed, time offset provided)
"Dec 6 13:18 UTC" (UTC and GMT are aliases for +0000)
"Dec 6" (midnight)
"13:18" (today assumed)
"3:39" (3:39AM assumed)
"3:39pm" (15:39)
"2006\-12\-06 13:18:29" (ISO 8601 format)
"2006\-12\-6 13:18"
"2006\-12\-6"
"12\-6"
"12/6"
"12/6/6" (Dec 6 2006)
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Lastly, there is Mercurial\'s internal format:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
"1165432709 0" (Wed Dec 6 13:18:29 2006 UTC)
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This is the internal representation format for dates\&. unixtime is
the number of seconds since the epoch (1970\-01\-01 00:00 UTC)\&.
offset is the offset of the local timezone, in seconds west of UTC
(negative if the timezone is east of UTC)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The log command also accepts date ranges:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
"<{datetime}" \- at or before a given date/time
">{datetime}" \- on or after a given date/time
"{datetime} to {datetime}" \- a date range, inclusive
"\-{days}" \- within a given number of days of today
.fi
.if n \{\
.RE
.\}
.SH "FILE NAME PATTERNS"
.sp
.if n \{\
.RS 4
.\}
.nf
Mercurial accepts several notations for identifying one or more
files at a time\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
By default, Mercurial treats filenames as shell\-style extended
glob patterns\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Alternate pattern notations must be specified explicitly\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To use a plain path name without any pattern matching, start it
with "path:"\&. These path names must completely match starting at
the current repository root\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To use an extended glob, start a name with "glob:"\&. Globs are
rooted at the current directory; a glob such as "*\&.c" will only
match files in the current directory ending with "\&.c"\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The supported glob syntax extensions are "**" to match any string
across path separators and "{a,b}" to mean "a or b"\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To use a Perl/Python regular expression, start a name with "re:"\&.
Regexp pattern matching is anchored at the root of the repository\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Plain examples:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
path:foo/bar   a name bar in a directory named foo in the root of
               the repository
path:path:name a file or directory named "path:name"
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Glob examples:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
glob:*\&.c       any name ending in "\&.c" in the current directory
*\&.c            any name ending in "\&.c" in the current directory
**\&.c           any name ending in "\&.c" in any subdirectory of the
               current directory including itself\&.
foo/*\&.c        any name ending in "\&.c" in the directory foo
foo/**\&.c       any name ending in "\&.c" in any subdirectory of foo
               including itself\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Regexp examples:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
re:\&.*\e\&.c$      any name ending in "\&.c", anywhere in the repository
.fi
.if n \{\
.RE
.\}
.SH "ENVIRONMENT VARIABLES"
.PP
HG
.RS 4
Path to the
\fIhg\fR
executable, automatically passed when running hooks, extensions or external tools\&. If unset or empty, this is the hg executable\(cqs name if it\(cqs frozen, or an executable named
\fIhg\fR
(with %PATHEXT% [defaulting to COM/EXE/BAT/CMD] extensions on Windows) is searched\&.
.RE
.PP
HGEDITOR
.RS 4
This is the name of the editor to run when committing\&. See EDITOR\&.
.sp
.if n \{\
.RS 4
.\}
.nf
(deprecated, use \&.hgrc)
.fi
.if n \{\
.RE
.\}
.RE
.PP
HGENCODING
.RS 4
This overrides the default locale setting detected by Mercurial\&. This setting is used to convert data including usernames, changeset descriptions, tag names, and branches\&. This setting can be overridden with the \-\-encoding command\-line option\&.
.RE
.PP
HGENCODINGMODE
.RS 4
This sets Mercurial\(cqs behavior for handling unknown characters while transcoding user input\&. The default is "strict", which causes Mercurial to abort if it can\(cqt map a character\&. Other settings include "replace", which replaces unknown characters, and "ignore", which drops them\&. This setting can be overridden with the \-\-encodingmode command\-line option\&.
.RE
.PP
HGMERGE
.RS 4
An executable to use for resolving merge conflicts\&. The program will be executed with three arguments: local file, remote file, ancestor file\&.
.sp
.if n \{\
.RS 4
.\}
.nf
(deprecated, use \&.hgrc)
.fi
.if n \{\
.RE
.\}
.RE
.PP
HGRCPATH
.RS 4
A list of files or directories to search for hgrc files\&. Item separator is ":" on Unix, ";" on Windows\&. If HGRCPATH is not set, platform default search path is used\&. If empty, only the \&.hg/hgrc from the current repository is read\&.
.sp
.if n \{\
.RS 4
.\}
.nf
For each element in HGRCPATH:
* if it\'s a directory, all files ending with \&.rc are added
* otherwise, the file itself will be added
.fi
.if n \{\
.RE
.\}
.RE
.PP
HGUSER
.RS 4
This is the string used as the author of a commit\&. If not set, available values will be considered in this order:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
HGUSER (deprecated)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
hgrc files from the HGRCPATH
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
EMAIL
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
interactive prompt
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
LOGNAME (with
\fI@hostname\fR
appended)
.sp
.if n \{\
.RS 4
.\}
.nf
(deprecated, use \&.hgrc)
.fi
.if n \{\
.RE
.\}
.RE
.RE
.PP
EMAIL
.RS 4
May be used as the author of a commit; see HGUSER\&.
.RE
.PP
LOGNAME
.RS 4
May be used as the author of a commit; see HGUSER\&.
.RE
.PP
VISUAL
.RS 4
This is the name of the editor to use when committing\&. See EDITOR\&.
.RE
.PP
EDITOR
.RS 4
Sometimes Mercurial needs to open a text file in an editor for a user to modify, for example when writing commit messages\&. The editor it uses is determined by looking at the environment variables HGEDITOR, VISUAL and EDITOR, in that order\&. The first non\-empty one is chosen\&. If all of them are empty, the editor defaults to
\fIvi\fR\&.
.RE
.PP
PYTHONPATH
.RS 4
This is used by Python to find imported modules and may need to be set appropriately if this Mercurial is not installed system\-wide\&.
.RE
.SH "SPECIFYING SINGLE REVISIONS"
.sp
.if n \{\
.RS 4
.\}
.nf
Mercurial supports several ways to specify individual revisions\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A plain integer is treated as a revision number\&. Negative integers
are treated as topological offsets from the tip, with \-1 denoting
the tip\&. As such, negative numbers are only useful if you\'ve
memorized your local tree numbers and want to save typing a single
digit\&. This editor suggests copy and paste\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A 40\-digit hexadecimal string is treated as a unique revision
identifier\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A hexadecimal string less than 40 characters long is treated as a
unique revision identifier, and referred to as a short\-form
identifier\&. A short\-form identifier is only valid if it is the
prefix of exactly one full\-length identifier\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Any other string is treated as a tag name, which is a symbolic
name associated with a revision identifier\&. Tag names may not
contain the ":" character\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The reserved name "tip" is a special tag that always identifies
the most recent revision\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The reserved name "null" indicates the null revision\&. This is the
revision of an empty repository, and the parent of revision 0\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The reserved name "\&." indicates the working directory parent\&. If
no working directory is checked out, it is equivalent to null\&. If
an uncommitted merge is in progress, "\&." is the revision of the
first parent\&.
.fi
.if n \{\
.RE
.\}
.SH "SPECIFYING MULTIPLE REVISIONS"
.sp
.if n \{\
.RS 4
.\}
.nf
When Mercurial accepts more than one revision, they may be
specified individually, or provided as a topologically continuous
range, separated by the ":" character\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The syntax of range notation is [BEGIN]:[END], where BEGIN and END
are revision identifiers\&. Both BEGIN and END are optional\&. If
BEGIN is not specified, it defaults to revision number 0\&. If END
is not specified, it defaults to the tip\&. The range ":" thus means
"all revisions"\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If BEGIN is greater than END, revisions are treated in reverse
order\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A range acts as a closed interval\&. This means that a range of 3:5
gives 3, 4 and 5\&. Similarly, a range of 9:6 gives 9, 8, 7, and 6\&.
.fi
.if n \{\
.RE
.\}
.SH "DIFF FORMATS"
.sp
.if n \{\
.RS 4
.\}
.nf
Mercurial\'s default format for showing changes between two
versions of a file is compatible with the unified format of GNU
diff, which can be used by GNU patch and many other standard
tools\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
While this standard format is often enough, it does not encode the
following information:
.fi
.if n \{\
.RE
.\}
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
executable status and other permission bits
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
copy or rename information
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
changes in binary files
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
creation or deletion of empty files
.sp
.if n \{\
.RS 4
.\}
.nf
Mercurial also supports the extended diff format from the git VCS
which addresses these limitations\&. The git diff format is not
produced by default because a few widespread tools still do not
understand this format\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This means that when generating diffs from a Mercurial repository
(e\&.g\&. with "hg export"), you should be careful about things like
file copies and renames or other things mentioned above, because
when applying a standard diff to a different repository, this
extra information is lost\&. Mercurial\'s internal operations (like
push and pull) are not affected by this, because they use an
internal binary format for communicating changes\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To make Mercurial produce the git extended diff format, use the
\-\-git option available for many commands, or set \'git = True\' in
the [diff] section of your hgrc\&. You do not need to set this
option when importing diffs in this format or using them in the mq
extension\&.
.fi
.if n \{\
.RE
.\}
.RE
.SH "TEMPLATE USAGE"
.sp
.if n \{\
.RS 4
.\}
.nf
Mercurial allows you to customize output of commands through
templates\&. You can either pass in a template from the command
line, via the \-\-template option, or select an existing
template\-style (\-\-style)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
You can customize output for any "log\-like" command: log,
outgoing, incoming, tip, parents, heads and glog\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Three styles are packaged with Mercurial: default (the style used
when no explicit preference is passed), compact and changelog\&.
Usage:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$ hg log \-r1 \-\-style changelog
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A template is a piece of text, with markup to invoke variable
expansion:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$ hg log \-r1 \-\-template "{node}\en"
b56ce7b07c52de7d5fd79fb89701ea538af65746
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Strings in curly braces are called keywords\&. The availability of
keywords depends on the exact context of the templater\&. These
keywords are usually available for templating a log\-like command:
.fi
.if n \{\
.RE
.\}
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
author: String\&. The unmodified author of the changeset\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
branches: String\&. The name of the branch on which the changeset was committed\&. Will be empty if the branch name was default\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
date: Date information\&. The date when the changeset was committed\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
desc: String\&. The text of the changeset description\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
diffstat: String\&. Statistics of changes with the following format: "modified files: +added/\-removed lines"
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
files: List of strings\&. All files modified, added, or removed by this changeset\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
file_adds: List of strings\&. Files added by this changeset\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
file_mods: List of strings\&. Files modified by this changeset\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
file_dels: List of strings\&. Files removed by this changeset\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
node: String\&. The changeset identification hash, as a 40\-character hexadecimal string\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
parents: List of strings\&. The parents of the changeset\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rev: Integer\&. The repository\-local changeset revision number\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
tags: List of strings\&. Any tags associated with the changeset\&.
.sp
.if n \{\
.RS 4
.\}
.nf
The "date" keyword does not produce human\-readable output\&. If you
want to use a date in your output, you can use a filter to process
it\&. Filters are functions which return a string based on the input
variable\&. You can also use a chain of filters to get the desired
output:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$ hg tip \-\-template "{date|isodate}\en"
2008\-08\-21 18:22 +0000
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
List of filters:
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
addbreaks: Any text\&. Add an XHTML "<br />" tag before the end of every line except the last\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
age: Date\&. Returns a human\-readable date/time difference between the given date/time and the current date/time\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
basename: Any text\&. Treats the text as a path, and returns the last component of the path after splitting by the path separator (ignoring trailing separators)\&. For example, "foo/bar/baz" becomes "baz" and "foo/bar//" becomes "bar"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
stripdir: Treat the text as path and strip a directory level, if possible\&. For example, "foo" and "foo/bar" becomes "foo"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
date: Date\&. Returns a date in a Unix date format, including the timezone: "Mon Sep 04 15:13:13 2006 0700"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
domain: Any text\&. Finds the first string that looks like an email address, and extracts just the domain component\&. Example:
\fIUser <\fR\fI\m[blue]\fBuser@example\&.com\fR\m[]\&\s-2\u[1]\d\s+2\fR\fI>\fR
becomes
\fIexample\&.com\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
email: Any text\&. Extracts the first string that looks like an email address\&. Example:
\fIUser <\fR\fI\m[blue]\fBuser@example\&.com\fR\m[]\&\s-2\u[1]\d\s+2\fR\fI>\fR
becomes
\fIuser@example\&.com\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
escape: Any text\&. Replaces the special XML/XHTML characters "&", "<" and ">" with XML entities\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
fill68: Any text\&. Wraps the text to fit in 68 columns\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
fill76: Any text\&. Wraps the text to fit in 76 columns\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
firstline: Any text\&. Returns the first line of text\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
nonempty: Any text\&. Returns
\fI(none)\fR
if the string is empty\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
hgdate: Date\&. Returns the date as a pair of numbers: "1157407993 25200" (Unix timestamp, timezone offset)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
isodate: Date\&. Returns the date in ISO 8601 format\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
localdate: Date\&. Converts a date to local date\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
obfuscate: Any text\&. Returns the input text rendered as a sequence of XML entities\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
person: Any text\&. Returns the text before an email address\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rfc822date: Date\&. Returns a date using the same format used in email headers\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
short: Changeset hash\&. Returns the short form of a changeset hash, i\&.e\&. a 12\-byte hexadecimal string\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
shortdate: Date\&. Returns a date like "2006\-09\-18"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
strip: Any text\&. Strips all leading and trailing whitespace\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
tabindent: Any text\&. Returns the text, with every line except the first starting with a tab character\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
urlescape: Any text\&. Escapes all "special" characters\&. For example, "foo bar" becomes "foo%20bar"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
user: Any text\&. Returns the user portion of an email address\&.
.RE
.SH "URL PATHS"
.sp
.if n \{\
.RS 4
.\}
.nf
Valid URLs are of the form:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
local/filesystem/path[#revision]
file://local/filesystem/path[#revision]
http://[user[:pass]@]host[:port]/[path][#revision]
https://[user[:pass]@]host[:port]/[path][#revision]
ssh://[user[:pass]@]host[:port]/[path][#revision]
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Paths in the local filesystem can either point to Mercurial
repositories or to bundle files (as created by \'hg bundle\' or
\'hg incoming \-\-bundle\')\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
An optional identifier after # indicates a particular branch, tag,
or changeset to use from the remote repository\&. See also \'hg help
revisions\'\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Some features, such as pushing to http:// and https:// URLs are
only possible if the feature is explicitly enabled on the remote
Mercurial server\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Some notes about using SSH with Mercurial:
\- SSH requires an accessible shell account on the destination
  machine and a copy of hg in the remote path or specified with as
  remotecmd\&.
\- path is relative to the remote user\'s home directory by default\&.
  Use an extra slash at the start of a path to specify an absolute path:
    ssh://example\&.com//tmp/repository
\- Mercurial doesn\'t use its own compression via SSH; the right
  thing to do is to configure it in your ~/\&.ssh/config, e\&.g\&.:
    Host *\&.mylocalnetwork\&.example\&.com
      Compression no
    Host *
      Compression yes
  Alternatively specify "ssh \-C" as your ssh command in your hgrc
  or with the \-\-ssh command line option\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
These URLs can all be stored in your hgrc with path aliases under
the [paths] section like so:
[paths]
alias1 = URL1
alias2 = URL2
\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
You can then use the alias for any command that uses a URL (for
example \'hg pull alias1\' would pull from the \'alias1\' path)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Two path aliases are special because they are used as defaults
when you do not provide the URL to a command:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
default:
  When you create a repository with hg clone, the clone command
  saves the location of the source repository as the new
  repository\'s \'default\' path\&. This is then used when you omit
  path from push\- and pull\-like commands (including incoming and
  outgoing)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
default\-push:
  The push command will look for a path named \'default\-push\', and
  prefer it over \'default\' if both are defined\&.
.fi
.if n \{\
.RE
.\}
.SH "USING ADDITIONAL FEATURES"
.sp
.if n \{\
.RS 4
.\}
.nf
Mercurial has the ability to add new features through the use of
extensions\&. Extensions may add new commands, add options to
existing commands, change the default behavior of commands, or
implement hooks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Extensions are not loaded by default for a variety of reasons:
they can increase startup overhead; they may be meant for
advanced usage only; they may provide potentially dangerous
abilities (such as letting you destroy or modify history); they
might not be ready for prime time; or they may alter some
usual behaviors of stock Mercurial\&. It is thus up to the user to
activate extensions as needed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To enable the "foo" extension, either shipped with Mercurial
or in the Python search path, create an entry for it in your
hgrc, like this:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
[extensions]
foo =
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
You may also specify the full path to an extension:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
[extensions]
myfeature = ~/\&.hgext/myfeature\&.py
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To explicitly disable an extension enabled in an hgrc of broader
scope, prepend its path with !:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
[extensions]
# disabling extension bar residing in /path/to/extension/bar\&.py
hgext\&.bar = !/path/to/extension/bar\&.py
# ditto, but no path was supplied for extension baz
hgext\&.baz = !
.fi
.if n \{\
.RE
.\}
.sp
disabled extensions:
.sp
.if n \{\
.RS 4
.\}
.nf
acl             hooks for controlling repository access
bookmarks       track a line of development with movable markers
bugzilla        hooks for integrating with the Bugzilla bug tracker
children        command to display child changesets
churn           command to display statistics about repository history
color           colorize output from some commands
convert         import revisions from foreign VCS repositories into Mercurial
extdiff         command to allow external programs to compare revisions
fetch           pull, update and merge in one command
gpg             commands to sign and verify changesets
graphlog        command to view revision graphs from a shell
hgcia           hooks for integrating with the CIA\&.vc notification service
hgk             browse the repository in a graphical way
highlight       syntax highlighting for hgweb (requires Pygments)
inotify         accelerate status report using Linux\'s inotify service
interhg         expand expressions into changelog and summaries
keyword         expand keywords in tracked files
mq              manage a stack of patches
notify          hooks for sending email notifications at commit/push time
pager           browse command output with an external pager
parentrevspec   interpret suffixes to refer to ancestor revisions
patchbomb       command to send changesets as (a series of) patch emails
purge           command to delete untracked files from the working directory
rebase          command to move sets of revisions to a different ancestor
record          commands to interactively select changes for commit/qrefresh
share           share a common history between several working directories
transplant      command to transplant changesets from another branch
win32mbcs       allow the use of MBCS paths with problematic encodings
win32text       perform automatic newline conversion
zeroconf        discover and advertise repositories on the local network
.fi
.if n \{\
.RE
.\}
.SH "FILES"
.PP
\&.hgignore
.RS 4
This file contains regular expressions (one per line) that describe file names that should be ignored by
\fBhg\fR\&. For details, see
\fBhgignore(5)\fR\&.
.RE
.PP
\&.hgtags
.RS 4
This file contains changeset hash values and text tag names (one of each separated by spaces) that correspond to tagged versions of the repository contents\&.
.RE
.PP
/etc/mercurial/hgrc, $HOME/\&.hgrc, \&.hg/hgrc
.RS 4
This file contains defaults and configuration\&. Values in
\&.hg/hgrc
override those in
$HOME/\&.hgrc, and these override settings made in the global
/etc/mercurial/hgrc
configuration\&. See
\fBhgrc(5)\fR
for details of the contents and format of these files\&.
.RE
.sp
Some commands (e\&.g\&. revert) produce backup files ending in \&.orig, if the \&.orig file already exists and is not tracked by Mercurial, it will be overwritten\&.
.SH "BUGS"
.sp
Probably lots, please post them to the mailing list (See Resources below) when you find them\&.
.SH "SEE ALSO"
.sp
\fBhgignore(5)\fR, \fBhgrc(5)\fR
.SH "AUTHOR"
.sp
Written by Matt Mackall <\m[blue]\fBmpm@selenic\&.com\fR\m[]\&\s-2\u[2]\d\s+2>
.SH "RESOURCES"
.sp
\m[blue]\fBMain Web Site\fR\m[]\&\s-2\u[3]\d\s+2
.sp
\m[blue]\fBSource code repository\fR\m[]\&\s-2\u[4]\d\s+2
.sp
\m[blue]\fBMailing list\fR\m[]\&\s-2\u[5]\d\s+2
.SH "COPYING"
.sp
Copyright (C) 2005\-2009 Matt Mackall\&. Free use of this software is granted under the terms of the GNU General Public License (GPL)\&.
.SH "NOTES"
.IP " 1." 4
user@example.com
.RS 4
\%mailto:user@example.com
.RE
.IP " 2." 4
mpm@selenic.com
.RS 4
\%mailto:mpm@selenic.com
.RE
.IP " 3." 4
Main Web Site
.RS 4
\%http://mercurial.selenic.com/
.RE
.IP " 4." 4
Source code repository
.RS 4
\%http://selenic.com/hg
.RE
.IP " 5." 4
Mailing list
.RS 4
\%http://selenic.com/mailman/listinfo/mercurial
.RE
